{"version":3,"file":"scrolltering.js","sources":["../src/scrolltering.js"],"sourcesContent":["/**\n * Simple Scrolly Triggering System\n * IntersectionObserverを使用したシンプルなスクロールトリガリングシステム\n * \n * 従来のスクロールイベントと異なり、IntersectionObserverは要素のビューポートとの交差を\n * 効率的に監視します。これにより、パフォーマンスの向上とバッテリー消費の削減を実現します。\n * \n * @class ScrollySystem\n * \n * @example\n * // コールバック方式（推奨）\n * const scrolly = new ScrollySystem({\n *   threshold: 0.5,\n *   onChange: ({ current, previous }) => {\n *     console.log(`${previous} から ${current} に変更`);\n *   }\n * });\n */\nclass ScrollySystem {\n    /**\n     * ScrollySystemのコンストラクタ\n     * \n     * @param {Object} options - 設定オプション\n     * @param {string} [options.selector='[data-trigger]'] - 監視対象要素のCSSセレクタ\n     * @param {string} [options.triggerAttribute='data-trigger'] - トリガーIDを格納する属性名\n     * @param {number|number[]} [options.threshold=0] - 交差の閾値（0-1の値、または配列）\n     * @param {string} [options.rootMargin='0px'] - ルート要素のマージン（CSS margin形式）\n     * @param {number} [options.debounceDelay=10] - デバウンス遅延時間（ミリ秒）\n     * @param {Function} [options.onChange=null] - トリガー変更時のコールバック関数\n     * @param {boolean} [options.debug=false] - デバッグモードの有効化\n     */\n    constructor(options = {}) {\n        // デフォルト設定\n        this.config = {\n            selector: '[data-trigger]',        // 監視対象のセレクタ\n            triggerAttribute: 'data-trigger',  // トリガーID属性名\n            threshold: 0,                      // 交差の閾値\n            rootMargin: '0px',                 // ルートマージン\n            debounceDelay: 10,                 // デバウンス遅延時間(ms)\n            onChange: null,                    // カスタムコールバック\n            debug: false,                      // デバッグモード\n            ...options\n        };\n        \n        this.observer = null;\n        this.visibleElements = new Map();\n        this.currentTriggerId = null;\n        this.lastValidTriggerId = null;\n        this._debounceTimer = null;           // タイマー管理用\n        this.instanceId = `scrolly-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`; // ユニークなインスタンスID\n        this._diagnosticCache = new Map();    // 診断結果のキャッシュ\n        \n        this.init();\n    }\n    \n    /**\n     * システムの初期化\n     * デバウンス関数の準備とDOMの準備状態に応じた処理を行います\n     * \n     * @private\n     */\n    init() {\n        // デバウンス関数の準備\n        this.debouncedUpdate = this.debounce(\n            () => this.updateCurrentTrigger(), \n            this.config.debounceDelay\n        );\n        \n        // DOMが準備できたら開始\n        if (document.readyState === 'loading') {\n            document.addEventListener('DOMContentLoaded', () => this.setup());\n        } else {\n            this.setup();\n        }\n    }\n    \n    /**\n     * IntersectionObserverのセットアップと初期評価\n     * ObserverとDOM要素の監視を開始し、初期状態を評価します\n     * \n     * @private\n     */\n    setup() {\n        this.setupObserver();\n        // 初期状態を即座に評価\n        this.updateCurrentTrigger();\n    }\n    \n    /**\n     * IntersectionObserverの作成と設定\n     * \n     * IntersectionObserverは要素がビューポートと交差する瞬間を効率的に検出します。\n     * 従来のscrollイベントと比較して以下の利点があります：\n     * - メインスレッドをブロックしない非同期処理\n     * - ブラウザによる最適化（フレーム単位での処理）\n     * - バッテリー消費の削減\n     * \n     * @private\n     */\n    setupObserver() {\n        const options = {\n            threshold: this.config.threshold,\n            rootMargin: this.config.rootMargin\n        };\n        \n        // IntersectionObserverのコールバック関数\n        // entries: 交差状態が変化した要素の配列\n        this.observer = new IntersectionObserver((entries) => {\n            entries.forEach(entry => {\n                const element = entry.target;\n                const triggerId = element.getAttribute(this.config.triggerAttribute);\n                \n                // entry.isIntersecting: 要素がビューポートと交差しているかどうか\n                // threshold設定に基づいて交差判定が行われる\n                if (entry.isIntersecting) {\n                    // 要素が画面内に入った場合、Mapに追加\n                    this.visibleElements.set(element, triggerId);\n                } else {\n                    // 要素が画面外に出た場合、Mapから削除\n                    this.visibleElements.delete(element);\n                }\n            });\n            \n            // デバウンス処理を適用してトリガー更新を実行\n            // 連続した交差イベントによるパフォーマンス低下を防ぐ\n            this.debouncedUpdate();\n        }, options);\n        \n        // 監視対象の要素を登録\n        const targets = document.querySelectorAll(this.config.selector);\n        targets.forEach(target => this.observer.observe(target));\n    }\n    \n    /**\n     * 現在アクティブなトリガーの更新\n     * \n     * 画面内に表示されている要素の中から、最も上に位置する要素を\n     * 現在のトリガーとして選択します。これにより、スクロール位置に\n     * 応じた適切なセクション判定を実現します。\n     * \n     * @private\n     */\n    updateCurrentTrigger() {\n        const entries = Array.from(this.visibleElements.entries());\n        \n        if (entries.length > 0) {\n            // 画面内で最も上にある要素を取得\n            // getBoundingClientRect()でビューポート相対位置を取得し、\n            // top値が最小（最上位）の要素を選択する\n            const topEntry = entries.reduce((prev, curr) => {\n                const prevRect = prev[0].getBoundingClientRect();\n                const currRect = curr[0].getBoundingClientRect();\n                return currRect.top < prevRect.top ? curr : prev;\n            });\n            \n            const triggerId = topEntry[1];\n            this.lastValidTriggerId = triggerId;\n            this.setCurrentTrigger(triggerId);\n        } else {\n            // 画面内に要素がない場合（すべての要素が画面外）\n            // このケースは、要素間のスペースが大きい場合や\n            // 高速スクロール時に発生する可能性がある\n            if (this.lastValidTriggerId !== null) {\n                // 最後の有効なトリガーを維持することで、\n                // トリガーが突然消失することを防ぐ\n                this.setCurrentTrigger(this.lastValidTriggerId);\n            }\n        }\n    }\n    \n    /**\n     * 現在のトリガーIDを設定し、変更イベントを発火\n     * \n     * @param {string} triggerId - 設定するトリガーID\n     * @private\n     */\n    setCurrentTrigger(triggerId) {\n        if (this.currentTriggerId !== triggerId) {\n            const previousTriggerId = this.currentTriggerId;\n            this.currentTriggerId = triggerId;\n            \n            // カスタムイベントを発火\n            this.emitTriggerChange(triggerId, previousTriggerId);\n        }\n    }\n    \n    /**\n     * トリガー変更イベントの発火\n     * \n     * コールバック関数とカスタムイベントの両方を発火することで、\n     * 異なる使用パターンに対応します。\n     * \n     * @param {string} currentId - 現在のトリガーID\n     * @param {string} previousId - 前回のトリガーID\n     * @private\n     */\n    emitTriggerChange(currentId, previousId) {\n        const detail = {\n            current: currentId,\n            previous: previousId,\n            timestamp: Date.now(),\n            instanceId: this.instanceId\n        };\n        \n        // カスタムコールバックがあれば実行\n        if (typeof this.config.onChange === 'function') {\n            this.config.onChange(detail);\n        }\n        \n        // イベントも発火（互換性のため）\n        const event = new CustomEvent('scrollTrigger', { detail });\n        window.dispatchEvent(event);\n    }\n    \n    /**\n     * デバウンス関数のユーティリティ\n     * \n     * 短時間に連続して呼び出される関数の実行を制限し、\n     * 最後の呼び出しから指定時間後に一度だけ実行します。\n     * これにより、IntersectionObserverからの頻繁なコールバックによる\n     * パフォーマンス低下を防ぎます。\n     * \n     * @param {Function} func - デバウンス対象の関数\n     * @param {number} wait - 待機時間（ミリ秒）\n     * @returns {Function} デバウンス処理が適用された関数\n     * @private\n     */\n    debounce(func, wait) {\n        return (...args) => {\n            clearTimeout(this._debounceTimer);\n            this._debounceTimer = setTimeout(() => func.apply(this, args), wait);\n        };\n    }\n    \n    /**\n     * 現在のトリガーIDを取得\n     * \n     * @returns {string|null} 現在のトリガーID、または未設定の場合はnull\n     * @public\n     */\n    getCurrentTriggerId() {\n        return this.currentTriggerId;\n    }\n    \n    /**\n     * 要素を動的に監視対象に追加\n     * \n     * ページの動的コンテンツや遅延読み込みされた要素を\n     * 後から監視対象に追加する際に使用します。\n     * \n     * @param {Element} element - 監視対象に追加する要素\n     * @public\n     */\n    observe(element) {\n        if (this.observer && element) {\n            this.observer.observe(element);\n        }\n    }\n    \n    /**\n     * 要素を動的に監視対象から削除\n     * \n     * 不要になった要素を監視対象から除外し、\n     * メモリリークを防ぎます。\n     * \n     * @param {Element} element - 監視対象から削除する要素\n     * @public\n     */\n    unobserve(element) {\n        if (this.observer && element) {\n            this.observer.unobserve(element);\n            this.visibleElements.delete(element);\n        }\n    }\n    \n    /**\n     * システムの完全な破棄とクリーンアップ\n     * \n     * すべてのリソース（タイマー、Observer、内部状態）を解放し、\n     * メモリリークを防ぎます。SPA環境でのページ遷移時や、\n     * コンポーネントのアンマウント時に呼び出すことを推奨します。\n     * \n     * @public\n     */\n    destroy() {\n        // タイマーをクリア\n        if (this._debounceTimer) {\n            clearTimeout(this._debounceTimer);\n        }\n        \n        // IntersectionObserverを完全に切断\n        // disconnect()ですべての監視対象が解除される\n        if (this.observer) {\n            this.observer.disconnect();\n        }\n        \n        // 内部状態をクリア\n        this.visibleElements.clear();\n        this.currentTriggerId = null;\n        this.lastValidTriggerId = null;\n        this._diagnosticCache.clear();\n    }\n\n    /**\n     * システム全体の診断を実行\n     * \n     * HTML構築時の注意点をチェックし、問題を特定します。\n     * 開発時のデバッグに有用で、パフォーマンス問題や設定ミスを検出できます。\n     * \n     * @param {boolean} [verbose=false] - 詳細な診断結果を出力するかどうか\n     * @returns {Object} 診断結果オブジェクト\n     * @public\n     */\n    diagnose(verbose = false) {\n        const cacheKey = `diagnose_${verbose}`;\n        if (this._diagnosticCache.has(cacheKey)) {\n            return this._diagnosticCache.get(cacheKey);\n        }\n\n        const issues = [];\n        const elements = document.querySelectorAll(this.config.selector);\n        \n        // 要素関連の診断\n        const elementIssues = this.validateElements();\n        issues.push(...elementIssues);\n        \n        // パフォーマンス関連の診断\n        const performanceIssues = this.checkPerformance();\n        issues.push(...performanceIssues);\n        \n        // 環境関連の診断\n        const environmentIssues = this._checkEnvironment();\n        issues.push(...environmentIssues);\n\n        // 診断結果の作成\n        const result = {\n            status: this._determineStatus(issues),\n            issues: issues,\n            summary: {\n                totalElements: elements.length,\n                problematicElements: this._countProblematicElements(issues),\n                performanceScore: this._calculatePerformanceScore(issues),\n                timestamp: Date.now()\n            }\n        };\n\n        // デバッグモードまたはverboseモードの場合、コンソールに出力\n        if (this.config.debug || verbose) {\n            this._outputDiagnosticResults(result);\n        }\n\n        // 結果をキャッシュ（5秒間）\n        this._diagnosticCache.set(cacheKey, result);\n        setTimeout(() => {\n            this._diagnosticCache.delete(cacheKey);\n        }, 5000);\n\n        return result;\n    }\n\n    /**\n     * 監視対象要素の妥当性をチェック\n     * \n     * @returns {Array} 要素関連の問題配列\n     * @private\n     */\n    validateElements() {\n        const issues = [];\n        const elements = document.querySelectorAll(this.config.selector);\n        const triggerIds = new Set();\n        const viewportHeight = window.innerHeight;\n\n        if (elements.length === 0) {\n            issues.push({\n                type: 'no_elements',\n                severity: 'error',\n                message: '監視対象要素が見つかりません',\n                suggestion: `セレクタ \"${this.config.selector}\" に一致する要素を追加してください`\n            });\n            return issues;\n        }\n\n        elements.forEach((element, index) => {\n            const triggerId = element.getAttribute(this.config.triggerAttribute);\n            const rect = element.getBoundingClientRect();\n            const styles = window.getComputedStyle(element);\n\n            // data-trigger属性のチェック\n            if (!triggerId) {\n                issues.push({\n                    type: 'missing_trigger_id',\n                    severity: 'error',\n                    message: `要素 ${index + 1} にトリガーID属性がありません`,\n                    element: element,\n                    suggestion: `${this.config.triggerAttribute}=\"unique-id\" を追加してください`\n                });\n            } else if (triggerIds.has(triggerId)) {\n                issues.push({\n                    type: 'duplicate_trigger_id',\n                    severity: 'error',\n                    message: `トリガーID \"${triggerId}\" が重複しています`,\n                    element: element,\n                    suggestion: '各要素には一意のトリガーIDを設定してください'\n                });\n            } else {\n                triggerIds.add(triggerId);\n            }\n\n            // 要素の高さチェック\n            const elementHeight = element.offsetHeight;\n            if (elementHeight < viewportHeight * 0.5) {\n                issues.push({\n                    type: 'insufficient_height',\n                    severity: 'warning',\n                    message: `要素 \"${triggerId || index + 1}\" の高さが不十分です (${elementHeight}px)`,\n                    element: element,\n                    suggestion: 'min-height: 100vh またはそれ以上の高さを設定してください'\n                });\n            }\n\n            // 可視性のチェック\n            if (styles.display === 'none') {\n                issues.push({\n                    type: 'element_hidden',\n                    severity: 'error',\n                    message: `要素 \"${triggerId || index + 1}\" が display: none で非表示です`,\n                    element: element,\n                    suggestion: 'display: none の代わりに visibility: hidden または opacity: 0 を使用してください'\n                });\n            } else if (styles.visibility === 'hidden') {\n                issues.push({\n                    type: 'element_visibility_hidden',\n                    severity: 'warning',\n                    message: `要素 \"${triggerId || index + 1}\" が visibility: hidden です`,\n                    element: element,\n                    suggestion: 'IntersectionObserverは監視しますが、ユーザーには見えません'\n                });\n            }\n\n            // position: fixed のチェック\n            if (styles.position === 'fixed') {\n                issues.push({\n                    type: 'fixed_position',\n                    severity: 'warning',\n                    message: `要素 \"${triggerId || index + 1}\" が position: fixed です`,\n                    element: element,\n                    suggestion: 'スクロール位置の計算に影響する可能性があります'\n                });\n            }\n        });\n\n        return issues;\n    }\n\n    /**\n     * パフォーマンス関連の問題をチェック\n     * \n     * @returns {Array} パフォーマンス関連の問題配列\n     * @private\n     */\n    checkPerformance() {\n        const issues = [];\n        const elements = document.querySelectorAll(this.config.selector);\n\n        // 要素数のチェック\n        if (elements.length > 50) {\n            issues.push({\n                type: 'too_many_elements',\n                severity: 'warning',\n                message: `監視対象要素が多すぎます (${elements.length}個)`,\n                suggestion: '50個以下に抑えるか、段階的な要素追加を検討してください'\n            });\n        }\n\n        // threshold設定のチェック\n        if (Array.isArray(this.config.threshold) && this.config.threshold.length > 5) {\n            issues.push({\n                type: 'complex_threshold',\n                severity: 'warning',\n                message: `threshold配列が複雑すぎます (${this.config.threshold.length}個の値)`,\n                suggestion: '単一の値または最大5個までの配列を推奨します'\n            });\n        } else if (this.config.threshold === 1.0) {\n            issues.push({\n                type: 'high_threshold',\n                severity: 'warning',\n                message: 'threshold: 1.0 は要素が完全に表示されるまで発火しません',\n                suggestion: '0.1 - 0.5 程度の値を推奨します'\n            });\n        }\n\n        // debounceDelay のチェック\n        if (this.config.debounceDelay > 100) {\n            issues.push({\n                type: 'high_debounce',\n                severity: 'info',\n                message: `debounceDelay が大きすぎる可能性があります (${this.config.debounceDelay}ms)`,\n                suggestion: '応答性を重視する場合は50ms以下を推奨します'\n            });\n        } else if (this.config.debounceDelay < 5) {\n            issues.push({\n                type: 'low_debounce',\n                severity: 'info',\n                message: `debounceDelay が小さすぎる可能性があります (${this.config.debounceDelay}ms)`,\n                suggestion: 'パフォーマンスを重視する場合は10ms以上を推奨します'\n            });\n        }\n\n        return issues;\n    }\n\n    /**\n     * 環境関連の問題をチェック\n     * \n     * @returns {Array} 環境関連の問題配列\n     * @private\n     */\n    _checkEnvironment() {\n        const issues = [];\n\n        // スクロール可能性のチェック\n        const documentHeight = Math.max(\n            document.body.scrollHeight,\n            document.documentElement.scrollHeight\n        );\n        const viewportHeight = window.innerHeight;\n\n        if (documentHeight <= viewportHeight) {\n            issues.push({\n                type: 'no_scroll',\n                severity: 'error',\n                message: 'ページがスクロール不可能です',\n                suggestion: 'コンテンツの高さを増やすか、overflow設定を確認してください'\n            });\n        }\n\n        // overflow設定のチェック\n        const bodyStyles = window.getComputedStyle(document.body);\n        const htmlStyles = window.getComputedStyle(document.documentElement);\n\n        if (bodyStyles.overflow === 'hidden' || htmlStyles.overflow === 'hidden') {\n            issues.push({\n                type: 'overflow_hidden',\n                severity: 'error',\n                message: 'body または html に overflow: hidden が設定されています',\n                suggestion: 'overflow-x: hidden のみを使用するか、overflow設定を削除してください'\n            });\n        }\n\n        // ビューポートメタタグのチェック（モバイル対応）\n        const viewportMeta = document.querySelector('meta[name=\"viewport\"]');\n        if (!viewportMeta) {\n            issues.push({\n                type: 'no_viewport_meta',\n                severity: 'warning',\n                message: 'ビューポートメタタグが設定されていません',\n                suggestion: '<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> を追加してください'\n            });\n        }\n\n        // IntersectionObserver サポートのチェック\n        if (!window.IntersectionObserver) {\n            issues.push({\n                type: 'no_intersection_observer',\n                severity: 'error',\n                message: 'IntersectionObserverがサポートされていません',\n                suggestion: 'ポリフィルを追加するか、対応ブラウザを使用してください'\n            });\n        }\n\n        return issues;\n    }\n\n    /**\n     * 問題の重要度から全体のステータスを決定\n     * \n     * @param {Array} issues - 問題配列\n     * @returns {string} ステータス ('ok', 'warning', 'error')\n     * @private\n     */\n    _determineStatus(issues) {\n        if (issues.some(issue => issue.severity === 'error')) {\n            return 'error';\n        } else if (issues.some(issue => issue.severity === 'warning')) {\n            return 'warning';\n        }\n        return 'ok';\n    }\n\n    /**\n     * 問題のある要素数をカウント\n     * \n     * @param {Array} issues - 問題配列\n     * @returns {number} 問題のある要素数\n     * @private\n     */\n    _countProblematicElements(issues) {\n        const problematicElements = new Set();\n        issues.forEach(issue => {\n            if (issue.element) {\n                problematicElements.add(issue.element);\n            }\n        });\n        return problematicElements.size;\n    }\n\n    /**\n     * パフォーマンススコアを計算\n     * \n     * @param {Array} issues - 問題配列\n     * @returns {number} パフォーマンススコア (0-10)\n     * @private\n     */\n    _calculatePerformanceScore(issues) {\n        let score = 10;\n        issues.forEach(issue => {\n            switch (issue.severity) {\n                case 'error':\n                    score -= 3;\n                    break;\n                case 'warning':\n                    score -= 1;\n                    break;\n                case 'info':\n                    score -= 0.5;\n                    break;\n            }\n        });\n        return Math.max(0, score);\n    }\n\n    /**\n     * 診断結果をコンソールに出力\n     * \n     * @param {Object} result - 診断結果\n     * @private\n     */\n    _outputDiagnosticResults(result) {\n        const statusEmoji = {\n            'ok': '✅',\n            'warning': '⚠️',\n            'error': '❌'\n        };\n\n        console.group(`${statusEmoji[result.status]} ScrollySystem 診断結果 (ID: ${this.instanceId.split('-').pop()})`);\n        \n        console.log('📊 概要:', result.summary);\n        \n        if (result.issues.length > 0) {\n            console.group('🔍 検出された問題:');\n            result.issues.forEach((issue, index) => {\n                const severityEmoji = {\n                    'error': '🚫',\n                    'warning': '⚠️',\n                    'info': 'ℹ️'\n                };\n                console.log(`${severityEmoji[issue.severity]} ${issue.message}`);\n                console.log(`   💡 ${issue.suggestion}`);\n                if (issue.element) {\n                    console.log('   🎯 要素:', issue.element);\n                }\n            });\n            console.groupEnd();\n        } else {\n            console.log('✨ 問題は検出されませんでした');\n        }\n        \n        console.groupEnd();\n    }\n}\n\n// ES6 module として export\nexport { ScrollySystem };"],"names":[],"mappings":"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"}